# complete-service-mesh.yaml

# RBAC Configuration
apiVersion: v1
kind: ServiceAccount
metadata:
  name: envoy-service-account
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: envoy-cluster-role
rules:
- apiGroups: [""]
  resources: ["services", "endpoints", "namespaces"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: envoy-cluster-role-binding
subjects:
- kind: ServiceAccount
  name: envoy-service-account
  namespace: default
roleRef:
  kind: ClusterRole
  name: envoy-cluster-role
  apiGroup: rbac.authorization.k8s.io
---
# Envoy Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: envoy-config
data:
  envoy-template.yaml: |
    admin:
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 9901
    static_resources:
      listeners:
      - name: listener_0
        address:
          socket_address:
            address: 0.0.0.0
            port_value: 15001
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              stat_prefix: ingress_http
              route_config:
                name: local_route
                virtual_hosts:
                - name: local_service
                  domains: ["*"]
                  routes:
                  - match:
                      prefix: "/"
                    route:
                      cluster: dynamic_cluster
                      timeout: 0.25s
              http_filters:
              - name: envoy.filters.http.lua
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
                  inline_code: |
                    function envoy_on_request(request_handle)
                      local path = request_handle:headers():get(":path")
                      local authority = request_handle:headers():get(":authority")
                      local target_namespace = request_handle:headers():get("X-Target-Namespace")
                      if not target_namespace then
                        target_namespace = "default"
                      end
                      
                      local original_host = authority or ""
                      local service_name = string.match(original_host, "^([^.]+)")
                      
                      if service_name then
                        local new_host = string.format("%s.%s.svc.cluster.local", service_name, target_namespace)
                        request_handle:headers():replace(":authority", new_host)
                        request_handle:headers():add("x-envoy-original-host", original_host)
                        request_handle:headers():add("x-envoy-target-namespace", target_namespace)
                        
                        -- Add debug logging
                        request_handle:logInfo(string.format("Routing request to: %s", new_host))
                      end
                    end
              - name: envoy.filters.http.router
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
      clusters:
      - name: dynamic_cluster
        connect_timeout: 0.25s
        type: STRICT_DNS
        dns_lookup_family: V4_ONLY
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: dynamic_cluster
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: ${SERVICE_HOST}
                    port_value: 8080
  startup.sh: |
    #!/bin/sh
    set -e
    
    # Wait for DNS to be ready
    sleep 5
    
    # Get the service host
    NAMESPACE=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)
    SERVICE_NAME=$(echo $HOSTNAME | cut -d'-' -f1)
    SERVICE_HOST="${SERVICE_NAME}.${NAMESPACE}.svc.cluster.local"
    echo "Service Host: $SERVICE_HOST"
    
    # Create directory for generated config
    mkdir -p /etc/envoy/generated
    
    # Generate Envoy config using sed instead of envsubst
    sed "s/\${SERVICE_HOST}/$SERVICE_HOST/g" /etc/envoy/envoy-template.yaml > /etc/envoy/generated/envoy.yaml
    
    # Verify config
    echo "Verifying Envoy configuration..."
    envoy --mode validate -c /etc/envoy/generated/envoy.yaml
    
    # Start Envoy
    echo "Starting Envoy..."
    exec envoy -c /etc/envoy/generated/envoy.yaml
---
# Gateway Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gateway-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gateway
  template:
    metadata:
      labels:
        app: gateway
    spec:
      serviceAccountName: envoy-service-account
      containers:
      - name: gateway
        image: ketanmujumdar/gateway:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
        env:
        - name: GO_SERVICE_URL
          value: "http://localhost:15001"
        - name: PYTHON_SERVICE_URL
          value: "http://localhost:15001"
        - name: PHP_SERVICE_URL
          value: "http://localhost:15001"
      - name: envoy-sidecar
        image: envoyproxy/envoy:v1.28.0
        command: ["/bin/sh"]
        args: ["-c", "apk add --no-cache gettext && /etc/envoy/startup.sh"]
        ports:
        - containerPort: 15001
        - containerPort: 9901
        volumeMounts:
        - name: envoy-config
          mountPath: /etc/envoy
          readOnly: true
        - name: envoy-generated
          mountPath: /etc/envoy/generated
        livenessProbe:
          httpGet:
            path: /ready
            port: 9901
          initialDelaySeconds: 10
          periodSeconds: 30
      volumes:
      - name: envoy-config
        configMap:
          name: envoy-config
          defaultMode: 0777
      - name: envoy-generated
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: gateway-service
spec:
  type: NodePort
  selector:
    app: gateway
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
---
# Go Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: go-api-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: go-api
  template:
    metadata:
      labels:
        app: go-api
    spec:
      serviceAccountName: envoy-service-account
      containers:
      - name: go-api
        image: ketanmujumdar/go-api:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
        env:
        - name: PHP_SERVICE_URL
          value: "http://localhost:15001"
      - name: envoy-sidecar
        image: envoyproxy/envoy:v1.28.0
        command: ["/bin/sh"]
        args: ["-c", "apk add --no-cache gettext && /etc/envoy/startup.sh"]
        ports:
        - containerPort: 15001
        - containerPort: 9901
        volumeMounts:
        - name: envoy-config
          mountPath: /etc/envoy
          readOnly: true
        - name: envoy-generated
          mountPath: /etc/envoy/generated
        livenessProbe:
          httpGet:
            path: /ready
            port: 9901
          initialDelaySeconds: 10
          periodSeconds: 30
      volumes:
      - name: envoy-config
        configMap:
          name: envoy-config
          defaultMode: 0777
      - name: envoy-generated
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: go-api-service
spec:
  selector:
    app: go-api
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
---
# Python Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: python-api-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: python-api
  template:
    metadata:
      labels:
        app: python-api
    spec:
      serviceAccountName: envoy-service-account
      containers:
      - name: python-api
        image: ketanmujumdar/python-api:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
        env:
        - name: GO_SERVICE_URL
          value: "http://localhost:15001"
      - name: envoy-sidecar
        image: envoyproxy/envoy:v1.28.0
        command: ["/bin/sh"]
        args: ["-c", "apk add --no-cache gettext && /etc/envoy/startup.sh"]
        ports:
        - containerPort: 15001
        - containerPort: 9901
        volumeMounts:
        - name: envoy-config
          mountPath: /etc/envoy
          readOnly: true
        - name: envoy-generated
          mountPath: /etc/envoy/generated
        livenessProbe:
          httpGet:
            path: /ready
            port: 9901
          initialDelaySeconds: 10
          periodSeconds: 30
      volumes:
      - name: envoy-config
        configMap:
          name: envoy-config
          defaultMode: 0777
      - name: envoy-generated
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: python-api-service
spec:
  selector:
    app: python-api
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
---
# PHP Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: php-api-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: php-api
  template:
    metadata:
      labels:
        app: php-api
    spec:
      serviceAccountName: envoy-service-account
      containers:
      - name: php-api
        image: ketanmujumdar/php-api:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
      - name: envoy-sidecar
        image: envoyproxy/envoy:v1.28.0
        command: ["/bin/sh"]
        args: ["-c", "apk add --no-cache gettext && /etc/envoy/startup.sh"]
        ports:
        - containerPort: 15001
        - containerPort: 9901
        volumeMounts:
        - name: envoy-config
          mountPath: /etc/envoy
          readOnly: true
        - name: envoy-generated
          mountPath: /etc/envoy/generated
        livenessProbe:
          httpGet:
            path: /ready
            port: 9901
          initialDelaySeconds: 10
          periodSeconds: 30
      volumes:
      - name: envoy-config
        configMap:
          name: envoy-config
          defaultMode: 0777
      - name: envoy-generated
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: php-api-service
spec:
  selector:
    app: php-api
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080